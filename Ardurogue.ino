#include <Arduboy2.h>
#include "bitwiseops.h"
//#include "dungeongen.h"

Arduboy2 arduboy;
Sprites sprites;

#define GAME_TITLE  0
#define GAME_PLAY 1
#define GAME_OVER 2
#define GAME_HIGH 3

//temporary between these comments
#define PLAYER_SIZE      8
#define PLAYER_X_OFFSET   WIDTH / 2 - PLAYER_SIZE / 2
#define PLAYER_Y_OFFSET   HEIGHT / 2 - PLAYER_SIZE / 2
//temporary between these comments

unsigned char genned;

int gamestate = GAME_TITLE;
int mapx = 0;
int mapy = 0;


#define WORLD_WIDTH    64
#define WORLD_HEIGHT  64
#define TILE_SIZE 8

const unsigned char PROGMEM longtileset[] =
{
// width, height,
8, 8,
// TILE 00
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// TILE 01
0x1c, 0x3e, 0x3f, 0xdf, 0xdf, 0x2f, 0x3e, 0x1c, 
// TILE 02
0x00, 0x0f, 0x29, 0x79, 0x09, 0x0f, 0x00, 0x00, 
// TILE 03
0x00, 0x06, 0x19, 0x21, 0x71, 0x21, 0x1e, 0x00, 
// TILE 04
0x00, 0x38, 0x7f, 0x77, 0x1b, 0x30, 0x00, 0x00, 
// TILE 05
0x00, 0x18, 0x24, 0x4f, 0x43, 0x24, 0x18, 0x00, 
// TILE 06
0x48, 0xa8, 0x90, 0x78, 0x0c, 0x0e, 0x07, 0x00, 
// TILE 07
0x00, 0x38, 0x5d, 0x5e, 0x6c, 0x38, 0x00, 0x00, 
// TILE 08
0x00, 0x3c, 0x7a, 0x5f, 0x5f, 0x76, 0x38, 0x00, 
// TILE 09
0x02, 0x46, 0xeb, 0xf7, 0xf7, 0xeb, 0x47, 0xf5, 
// TILE 10
0x00, 0x38, 0xc4, 0x2a, 0x5e, 0x7f, 0xaf, 0x7f, 
// TILE 11
0x00, 0x00, 0x00, 0x3f, 0x4c, 0x39, 0x78, 0xc4, 
// TILE 12
0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
// TILE 13
0xee, 0xe0, 0xee, 0x0e, 0xee, 0xe0, 0xee, 0x0e, 
// TILE 14
0x20, 0x74, 0x7e, 0xbf, 0xbf, 0x5e, 0x74, 0x20, 
// TILE 15
0x00, 0x47, 0x55, 0x7d, 0x05, 0x07, 0x00, 0x00, 
// TILE 16
0x0c, 0x1a, 0x3a, 0x6a, 0x2e, 0x1e, 0x0c, 0x00, 
// TILE 17
0x00, 0x3c, 0x0e, 0x1e, 0x1e, 0x0e, 0x3c, 0x00, 
// TILE 18
0x00, 0x38, 0x44, 0x4f, 0x47, 0x44, 0x38, 0x00, 
// TILE 19
0x0c, 0x0a, 0x09, 0x7f, 0x7f, 0x09, 0x0a, 0x0c, 
// TILE 20
0x04, 0x66, 0xf5, 0x5e, 0xb0, 0x30, 0x20, 0x00, 
// TILE 21
0x0e, 0xdb, 0x5f, 0x0b, 0x6f, 0xbf, 0xc6, 0x8c, 
// TILE 22
0x02, 0x46, 0xfb, 0xf7, 0xf7, 0xfb, 0x47, 0xf5, 
// TILE 23
0x1b, 0x87, 0x7e, 0xbc, 0x70, 0xc0, 0x00, 0x00, 
// TILE 24
0x23, 0x7f, 0x1f, 0x06, 0x3c, 0x70, 0x80, 0x00, 
// TILE 25
0x00, 0x00, 0x00, 0x07, 0x0c, 0x08, 0x08, 0x08, 
// TILE 26
0x55, 0x11, 0x55, 0x44, 0x55, 0x11, 0x55, 0x44, 
// TILE 27
0xe0, 0x00, 0xf0, 0x00, 0xf8, 0x00, 0xfc, 0xfc, 
// TILE 28
0x00, 0x00, 0x07, 0x55, 0x7d, 0x07, 0x00, 0x00, 
// TILE 29
0x40, 0x68, 0x6c, 0x6c, 0x0c, 0x6c, 0x60, 0x00, 
// TILE 30
0x00, 0x7c, 0x6e, 0x0e, 0x0e, 0x6e, 0x7c, 0x00, 
// TILE 31
0x00, 0x18, 0x64, 0x4f, 0x47, 0x64, 0x18, 0x00, 
// TILE 32
0x80, 0xf8, 0x4c, 0x26, 0x12, 0x0a, 0x06, 0x03, 
// TILE 33
0x0c, 0x0e, 0x46, 0xe3, 0xe3, 0xb3, 0x5e, 0x0c, 
// TILE 34
0x00, 0x46, 0xed, 0x77, 0x77, 0xeb, 0x46, 0x00, 
// TILE 35
0x00, 0x4e, 0xf3, 0xe3, 0xe3, 0xf3, 0x4f, 0x01, 
// TILE 36
0x00, 0xc0, 0xe0, 0x30, 0x3c, 0xfe, 0xff, 0xff, 
// TILE 37
0x00, 0xe0, 0x31, 0x13, 0x27, 0xad, 0x43, 0x7f, 
// TILE 38
0x08, 0x08, 0x08, 0xf8, 0x08, 0x08, 0x08, 0x08, 
// TILE 39
0x66, 0x66, 0x66, 0x66, 0xcc, 0xcc, 0xcc, 0xcc, 
// TILE 40
0xff, 0xff, 0xe0, 0xfe, 0xc0, 0xfc, 0x80, 0xf8, 
// TILE 41
0x00, 0x0f, 0x49, 0x7d, 0x09, 0x0f, 0x00, 0x00, 
// TILE 42
0x00, 0x1c, 0x2e, 0x2e, 0x36, 0x1c, 0x00, 0x00, 
// TILE 43
0x80, 0x7c, 0x0e, 0x3f, 0x3f, 0x0e, 0x7c, 0x80, 
// TILE 44
0x00, 0x00, 0x3c, 0x4f, 0x47, 0x3c, 0x00, 0x00, 
// TILE 45
0x00, 0x60, 0x60, 0x10, 0x08, 0x06, 0x04, 0x00, 
// TILE 46
0x40, 0x26, 0xab, 0x7f, 0x3f, 0xeb, 0x26, 0x40, 
// TILE 47
0x00, 0x47, 0xea, 0x76, 0x76, 0xea, 0x47, 0x00, 
// TILE 48
0x06, 0x4f, 0xeb, 0x7f, 0x7f, 0xeb, 0x4f, 0x06, 
// TILE 49
0xff, 0x3d, 0x3e, 0xfe, 0xf6, 0xec, 0x78, 0xe0, 
// TILE 50
0x59, 0xa7, 0xab, 0x2f, 0x67, 0x45, 0x82, 0x01, 
// TILE 51
0x08, 0x08, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00, 
// TILE 52
0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0x66, 0x66, 
// TILE 53
0xfc, 0x9a, 0x9a, 0xfa, 0xfa, 0xfa, 0xfa, 0xac, 
// TILE 54
0x04, 0x0c, 0x48, 0x7c, 0x7c, 0x4c, 0x04, 0x04, 
// TILE 55
0x00, 0x3e, 0x5f, 0x55, 0x55, 0x5d, 0x5f, 0x00, 
// TILE 56
0x00, 0x00, 0x3e, 0x1f, 0x7e, 0x3f, 0x7e, 0x00, 
// TILE 57
0x00, 0x38, 0x7d, 0x7b, 0x7a, 0x7c, 0x38, 0x00, 
// TILE 58
0x00, 0x20, 0x60, 0x10, 0x08, 0x04, 0x02, 0x00, 
// TILE 59
0x30, 0x78, 0x0e, 0x1c, 0x0e, 0x38, 0x70, 0x00, 
// TILE 60
0x00, 0x06, 0x2b, 0x37, 0x77, 0x7b, 0x56, 0x00, 
// TILE 61
0xe0, 0xf0, 0xc8, 0x80, 0xc6, 0x6f, 0x7f, 0xf9, 
// TILE 62
0x01, 0x03, 0x03, 0xf9, 0x34, 0x1a, 0x07, 0x03, 
// TILE 63
0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
// TILE 64
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// TILE 65
0x66, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x66, 0x33, 
// TILE 66
0x00, 0x7e, 0x57, 0x57, 0x77, 0x5f, 0x7e, 0x00, 
// TILE 67
0x00, 0x6e, 0x4d, 0x5d, 0x5d, 0x4d, 0x6e, 0x00, 
// TILE 68
0x00, 0x3e, 0x5f, 0x57, 0x51, 0x5d, 0x5f, 0x00, 
// TILE 69
0x00, 0x40, 0x60, 0x7e, 0x3e, 0x7e, 0x06, 0x00, 
// TILE 70
0x30, 0x28, 0x7c, 0x3c, 0x1c, 0x0f, 0x02, 0x00, 
// TILE 71
0x00, 0x06, 0x7e, 0x06, 0x0e, 0x1e, 0x0e, 0x00, 
// TILE 72
0x0b, 0x86, 0x8a, 0xff, 0xfc, 0xf8, 0xe0, 0x00, 
// TILE 73
0x00, 0x46, 0xeb, 0x5f, 0x5f, 0xeb, 0x46, 0x00, 
// TILE 74
0xf8, 0xec, 0x1c, 0xd8, 0xf0, 0xe0, 0x74, 0xb8, 
// TILE 75
0x1f, 0x3b, 0x3d, 0x60, 0x81, 0x01, 0x01, 0x00, 
// TILE 76
0x00, 0x00, 0x00, 0xf0, 0x18, 0x08, 0x08, 0x08, 
// TILE 77
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// TILE 78
0x42, 0x24, 0x3c, 0x72, 0xd3, 0x3d, 0x27, 0xc3, 
// TILE 79
0x20, 0x4c, 0x1a, 0x96, 0x9a, 0x4e, 0x4c, 0x00, 
// TILE 80
0x00, 0x6f, 0x41, 0x43, 0x43, 0x41, 0x6f, 0x00, 
// TILE 81
0x00, 0x08, 0x0c, 0x6e, 0x3b, 0x18, 0x08, 0x00, 
// TILE 82
0x00, 0x70, 0x70, 0x78, 0x7e, 0x1e, 0x7e, 0x00, 
// TILE 83
0x00, 0x1c, 0x1a, 0x7e, 0x76, 0x1e, 0x1c, 0x00, 
// TILE 84
0x00, 0x00, 0x10, 0x7f, 0x7e, 0x10, 0x00, 0x00, 
// TILE 85
0x28, 0x1c, 0x2e, 0x3e, 0x3e, 0x3c, 0x20, 0x20, 
// TILE 86
0x00, 0x4e, 0xeb, 0xf7, 0xf7, 0xeb, 0x4e, 0x00, 
// TILE 87
0x00, 0x8c, 0xc6, 0x66, 0xf7, 0x7f, 0xb9, 0xfc, 
// TILE 88
0x05, 0x0f, 0x15, 0x0b, 0x02, 0x18, 0x4f, 0x61, 
// TILE 89
0x08, 0x08, 0x08, 0x0f, 0x08, 0x08, 0x08, 0x08, 
// TILE 90
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// TILE 91
0x00, 0x3c, 0x7e, 0x7e, 0x0e, 0x1e, 0x3c, 0x00, 
// TILE 92
0x00, 0x0d, 0x3e, 0x7e, 0x7c, 0x3c, 0x5a, 0x20, 
// TILE 93
0x00, 0x30, 0x7a, 0x7d, 0x7d, 0x7a, 0x30, 0x00, 
// TILE 94
0x00, 0x60, 0x60, 0x7e, 0x06, 0x06, 0x04, 0x00, 
// TILE 95
0x00, 0x0e, 0x73, 0x7e, 0x7e, 0x73, 0x0e, 0x00, 
// TILE 96
0x0c, 0x3e, 0x3e, 0x3c, 0x3a, 0x3c, 0x3a, 0x0c, 
// TILE 97
0x00, 0x0a, 0x0e, 0x7f, 0x0e, 0x0a, 0x00, 0x00, 
// TILE 98
0x11, 0x3b, 0x1f, 0x06, 0x0e, 0x1f, 0x5b, 0x31, 
// TILE 99
0x00, 0x46, 0xeb, 0xf7, 0xf7, 0xeb, 0x46, 0x00, 
// TILE 100
0xf5, 0x35, 0xef, 0xed, 0xdb, 0x87, 0x9d, 0x3a, 
// TILE 101
0x3e, 0x3f, 0x07, 0x03, 0x67, 0xbf, 0x1e, 0x0a, 
// TILE 102
0x08, 0x08, 0x18, 0xf0, 0x00, 0x00, 0x00, 0x00, 
// TILE 103
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// TILE 104
0x08, 0x70, 0x00, 0x1c, 0x06, 0xc0, 0x20, 0x00, 
// TILE 105
0x00, 0x07, 0x55, 0x7d, 0x05, 0x07, 0x00, 0x00, 
// TILE 106
0x00, 0x3c, 0x7e, 0x42, 0x42, 0x3c, 0x00, 0x00, 
// TILE 107
0x0c, 0x1e, 0x3e, 0x7c, 0x2e, 0x16, 0x0c, 0x00, 
// TILE 108
0x00, 0x1c, 0x66, 0x7c, 0x7c, 0x66, 0x1c, 0x00, 
// TILE 109
0x00, 0x30, 0x78, 0x7e, 0x31, 0x02, 0x06, 0x04, 
// TILE 110
0x1c, 0x3e, 0x1c, 0xfe, 0x1c, 0x3e, 0x1c, 0x00, 
// TILE 111
0x00, 0x70, 0xbc, 0xff, 0xfc, 0xbe, 0x70, 0x00, 
// TILE 112
0x00, 0x46, 0xeb, 0x77, 0x77, 0xeb, 0x46, 0x00, 
// TILE 113
0x00, 0x00, 0x05, 0x0f, 0x0f, 0x15, 0x27, 0x4f, 
// TILE 114
0x00, 0x02, 0x64, 0xb4, 0xac, 0xa8, 0xfc, 0xfe, 
// TILE 115
0x08, 0x08, 0x08, 0xff, 0x00, 0x00, 0x00, 0x00, 
// TILE 116
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// TILE 117
0x07, 0x0e, 0x0c, 0x38, 0x4c, 0x0e, 0x06, 0x00, 
// TILE 118
0x00, 0x00, 0x07, 0x65, 0x7d, 0x07, 0x00, 0x00, 
// TILE 119
0x00, 0x50, 0x50, 0x00, 0x14, 0x54, 0x40, 0x00, 
// TILE 120
0x0e, 0x3e, 0x7e, 0x7e, 0x42, 0x32, 0x0e, 0x00, 
// TILE 121
0x00, 0x1c, 0x24, 0x4f, 0x47, 0x24, 0x1c, 0x00, 
// TILE 122
0x00, 0x18, 0x24, 0x56, 0x4e, 0x3f, 0x03, 0x00, 
// TILE 123
0x40, 0x2c, 0x18, 0x3c, 0x2e, 0x07, 0x03, 0x00, 
// TILE 124
0x34, 0x6e, 0xab, 0x1f, 0x9f, 0xab, 0x6e, 0x34, 
// TILE 125
0x00, 0x4e, 0xeb, 0x77, 0x77, 0xeb, 0x4e, 0x00, 
// TILE 126
0x9f, 0xfd, 0xf9, 0xe2, 0x86, 0x7c, 0x38, 0x00, 
// TILE 127
0xcf, 0xd7, 0xeb, 0x79, 0x78, 0x30, 0x00, 0x00, 
// TILE 128
0x00, 0x00, 0x00, 0xff, 0x08, 0x08, 0x08, 0x08, 
// TILE 129
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};


/*int world[WORLD_HEIGHT][WORLD_WIDTH] = {
  { 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 },
  { 13, 0, 0, 13, 0, 0, 0, 0, 0, 0, 13, 0, 0, 13 },
  { 13, 0, 0, 13, 0, 0, 0, 0, 0, 0, 13, 0, 0, 13 },
  { 13, 0, 0, 13, 0, 0, 0, 0, 0, 0, 13, 0, 0, 13 },
  { 13, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13 },
  { 13, 0, 0, 13, 0, 0, 0, 0, 0, 0, 13, 0, 0, 13 },
  { 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 13 },
  { 13, 0, 0, 13, 0, 0, 0, 0, 0, 0, 13, 0, 0, 13 },
  { 13, 0, 0, 13, 0, 0, 0, 0, 0, 0, 13, 0, 0, 13 },
  { 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 }
 
};*/

//temporary between these comments
void drawplayer() {
  sprites.drawSelfMasked(PLAYER_X_OFFSET, PLAYER_Y_OFFSET, longtileset, 9 );
 // arduboy.fillRect( PLAYER_SIZE, PLAYER_SIZE, WHITE);
}
//temporary between these comments

void drawworld() {
  setMapBit(8,8);
  setMapBit(7,7);
  const int tileswide = 96 / TILE_SIZE + 1;
  const int tilestall = 64 / TILE_SIZE + 1;
  for(int y = 0; y < tilestall; y++) {
    for(int x = 0; x < tileswide; x++) {
      const int tilex = x - mapx / TILE_SIZE;
      const int tiley = y - mapy / TILE_SIZE;
      if(tilex >= 0 && tiley >= 0 && tilex < WORLD_WIDTH && tiley < WORLD_HEIGHT) {
        if(getMapBit(x, y)){
        sprites.drawSelfMasked(x * TILE_SIZE + mapx % TILE_SIZE, y * TILE_SIZE + mapy % TILE_SIZE, longtileset, 0 );
        }
        else {
          sprites.drawSelfMasked(x * TILE_SIZE + mapx % TILE_SIZE, y * TILE_SIZE + mapy % TILE_SIZE, longtileset, 1 );
        }
        
        }
      }
    }
   arduboy.fillRect(0, 0, 48, 8, BLACK);
 arduboy.setCursor(0, 0);
  arduboy.print(0 - mapx / TILE_SIZE);
  arduboy.print(",");
  arduboy.print(0 - mapy / TILE_SIZE);
  }




void titlescreen() {
  arduboy.setCursor(0, 0);
  arduboy.print("Title Screen\n");
  
  if(arduboy.justPressed(A_BUTTON)) {
    gamestate = GAME_PLAY;
  }
}

void playerinput() {
  if(arduboy.pressed(UP_BUTTON)) {
    if(mapy < PLAYER_Y_OFFSET) {
      mapy += 1;
    }
  }
  if(arduboy.pressed(DOWN_BUTTON)) {
    if(PLAYER_Y_OFFSET + PLAYER_SIZE < mapy + TILE_SIZE * WORLD_HEIGHT) {
      mapy -= 1;
    }
  }
  if(arduboy.pressed(LEFT_BUTTON)) {
   if(mapx < PLAYER_X_OFFSET) {
     mapx += 1;
    }
  }
  if(arduboy.pressed(RIGHT_BUTTON)) {
   if(PLAYER_X_OFFSET + PLAYER_SIZE < mapx + TILE_SIZE * WORLD_WIDTH) {
     mapx -= 1;
    }
  }
  
}

void gameplay() {
  
  if (genned = 0)
    {
      // genDungeon();
     
       genned++;
    }
  else {
    
  }
   
  playerinput();
  drawworld();
  drawplayer();
  if(arduboy.justPressed(A_BUTTON)) {
    gamestate = GAME_OVER;
  } 
  if(arduboy.justPressed(B_BUTTON)) {
    //genDungeon();
  }
  
}

void gameoverscreen() {
  
  arduboy.setCursor(0, 0);
  arduboy.print(mapx);
}


void gameloop() {
  switch(gamestate) {
    case GAME_TITLE:
      titlescreen();
    //titlescreen stuff
      break;

    case GAME_PLAY:
    //gameplay stuff
      
      gameplay();
      break;

    case GAME_OVER:
    //gameover screen
      gameoverscreen();
      break;
  }
}
void setup() {
  // put your setup code here, to run once:
  arduboy.begin(); //start arduboy properly, may need to replace for space
  arduboy.setFrameRate(15); //can probably reduce
  arduboy.initRandomSeed();
  arduboy.display();
  arduboy.clear();
}

void loop() {
  // put your main code here, to run repeatedly:
  if(!(arduboy.nextFrame())){
  }
  arduboy.pollButtons();
  arduboy.clear();
  
  
  gameloop();
  arduboy.display();
  }

